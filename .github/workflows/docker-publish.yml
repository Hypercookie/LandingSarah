on:
  schedule:
    - cron: '31 6 * * *'
  push:
    branches: [ "master" ]
    # Publish semver tags as releases.
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ "master" ]

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository}}

jobs:
  test:

    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step to install Node.js and dependencies
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22'  # Specify the Node.js version

      - name: Install dependencies
        run: npm install

      - name: Run Tailwind CSS
        run: npx tailwindcss -i ./src/styles.css -o ./src/output.css

      # Install the cosign tool except on PR
      # https://github.com/sigstore/cosign-installer
      - name: Install cosign
        if: github.event_name != 'pull_request'
        uses: sigstore/cosign-installer@59acb6260d9c0ba8f4a2f9d9b48431a222b68e20 #v3.5.0
        with:
          cosign-release: 'v2.2.4'

      # Set up BuildKit Docker container builder to be able to build
      # multi-platform images and export cache
      # https://github.com/docker/setup-buildx-action
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@f95db51fddba0c2d1ec667646a06c2ce06100226 # v3.0.0

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@96383f45573cb7f253c731d3b3ab81c87ef81934 # v5.0.0
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      # Build Docker image (without pushing)
      - name: Build Docker image
        id: build
        uses: docker/build-push-action@0565240e2d4ab88bba5387d719585280857ece09 # v5.0.0
        with:
          context: .
          push: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - id: toLowerCase
        run: INPUT=${{ env.IMAGE_NAME }} echo "::set-output name=lowerCaseValue::${INPUT,,}"
      # Run the Docker container
      - name: Run Docker container
        run: docker run -d -p 3000:3000 --name test-container ${{ env.REGISTRY }}/${{steps.toLowerCase.outputs.lowerCaseValue}}:${{ steps.build.outputs.digest }}

      - name: Wait for container to be ready
        run: |
          for i in {1..10}; do
            if curl --silent --fail http://localhost:3000; then
              echo "Container is up!"
              break
            fi
            echo "Waiting for container..."
            sleep 5
          done

      - name: Test Docker container for 200 OK
        run: |
          status_code=$(curl --write-out "%{http_code}" --silent --output /dev/null http://localhost:3000)
          if [ "$status_code" -ne 200 ]; then
            echo "Expected HTTP 200, but got $status_code"
            exit 1
          fi
          echo "Received HTTP 200 OK from container."

      - name: Stop and remove Docker container
        run: docker stop test-container && docker rm test-container

  upload:
    needs: test
    runs-on: ubuntu-latest
    if: success()

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Log into Docker registry
      - name: Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d # v3.0.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Push Docker image if tests pass
      - name: Push Docker image
        uses: docker/build-push-action@0565240e2d4ab88bba5387d719585280857ece09 # v5.0.0
        with:
          context: .
          push: true
          tags: ${{ steps.build.outputs.tags }}
          labels: ${{ steps.build.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Sign the resulting Docker image digest
      # This will only write to the public Rekor transparency log when the Docker
      # repository is public to avoid leaking data.
      - name: Sign the published Docker image
        env:
          TAGS: ${{ steps.build.outputs.tags }}
          DIGEST: ${{ steps.build.outputs.digest }}
        run: echo "${TAGS}" | xargs -I {} cosign sign --yes {}@${DIGEST}
